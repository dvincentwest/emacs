#+TITLE: Vince's Emacs Configuration
#+AUTHOR: Vince West

* Sensible Defaults
** Default Settings
#+BEGIN_SRC emacs-lisp
;; (add-hook 'window-setup-hook 'toggle-frame-maximized t)

;; inhibit startup screen
(setq inhibit-startup-screen t
      ;; Show *scratch* on start
      initial-buffer-choice t)

;; replace default buffer-list with something I like better
(global-set-key "\C-x\C-b" 'buffer-menu)
(global-set-key (kbd "C-c .") 'xref-find-definitions)

(setq default-directory "~/")
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))

(when window-system
  ;(blink-cursor-mode 0)                          ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips

(setq tool-bar-mode nil)
(menu-bar-mode -1)
(setq-default
 mode-require-final-newline 'visit-save           ; Add a newline at EOF on visit-save
 tab-width 4)                                     ; Set width for tabs
(setq-default indent-tabs-mode nil)               ; Normally don't use tabs
(setq line-number-mode t)                         ; Enable line numbers in the mode-line
(setq column-number-mode t)                       ; Enable column numbers in the mode-line
(setq show-paren-mode t)                          ; Highlight matching parentheses
(set-default 'truncate-lines t)
(show-paren-mode)

(prefer-coding-system 'utf-8)
(setq fill-column 80)
(setq-default fill-column 80)
(set-fill-column 80)
(column-number-mode)
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; scrolling options
;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(4 ((shift) . 10))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq backup-directory-alist  ;; backup files go in a dedicated directory
      `(("." . ,(concat user-emacs-directory "backups"))))
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(global-set-key (kbd "C-S-b") 'ibuffer)

; Garbage-collect on focus-out, Emacs /should/ feel snappier.
(add-hook 'focus-out-hook #'garbage-collect)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq js-indent-level 2)
#+END_SRC
** Dired Settings
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Appearance
#+BEGIN_SRC emacs-lisp
;; Other than loading the theme, I prefer to set font attributes
;; via the menu which then gets saved to custom.el
(use-package zenburn-theme
  :ensure t
  ;; :defer t  ; use if you don't want to load the theme
  )
;; (load-theme 'deeper-blue)
(enable-theme 'zenburn)
#+END_SRC

* Packages
** Evil Mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq
   evil-want-C-u-scroll nil
   evil-search-module 'evil-search)
  :config
  (evil-mode)
  )

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (setq
   org-startup-indented 1
   ;; org-blank-before-new-entry '((heading . auto)
   ;; 							   (plain-list-item . auto))
   org-src-fontify-natively t
   org-src-preserve-indentation t
   org-src-tab-acts-natively t
   org-latex-table-scientific-notation nil
   org-latex-listings 'minted
   org-latex-packages-alist '(("" "minted"))
   org-latex-minted-options
   '(("frame" "leftline")
     ("linenos" "")
     ("fontsize" "\\small")
     )
   org-latex-pdf-process
   '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  )
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :init
  (setq ivy-height 20)
  (ivy-mode 1)
  :config
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (define-key undo-tree-map (kbd "C-/") nil)  ;; so I can use it later for toggling comments
  )

(use-package counsel :init)
(use-package swiper :init)
(use-package counsel-projectile :init)
  #+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :init (add-hook 'after-init-hook 'global-company-mode)
  ;; (company-mode)
  (setq company-selection-wrap-around t
		company-tooltip-align-annotations t
		company-idle-delay 0.2
		company-minimum-prefix-length 2
		company-tooltip-limit 25)
  )
#+END_SRC

** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :init (powerline-default-theme)
  )
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  )
(add-hook 'yaml-mode-hook (lambda() (setq evil-shift-width 2)))

#+END_SRC

** Markdown Related
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command
		      (concat
		       "pandoc"
		       " --from=markdown --to=html"
		       " --standalone --mathjax --highlight-style=pygments"))
		(setq markdown-xhtml-header-content
			  (concat "<script type=\"text/javascript\" async"
					  " src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/"
					  "2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\">"
					  "</script>"))
		)

(use-package markdown-toc
  :ensure t
  )

(use-package mmm-mode
  :init
  (defun my-mmm-markdown-auto-class (lang &optional submode)
    "Define a mmm-mode class for LANG in `markdown-mode' using SUBMODE.
    If SUBMODE is not provided, use `LANG-mode' by default."
    (let ((class (intern (concat "markdown-" lang)))
	  (submode (or submode (intern (concat lang "-mode"))))
	  (front (concat "^```" lang "[\n\r]+"))
	  (back "^```"))
      (mmm-add-classes (list (list class :submode submode :front front :back back)))
      (mmm-add-mode-ext-class 'markdown-mode nil class)))
  (setq mmm-global-mode 'maybe) ;; Mode names that derive directly from the language name
  (mapc 'my-mmm-markdown-auto-class
	'("awk" "bibtex" "c" "cpp" "css" "html" "latex" "lisp" "makefile"
	  "markdown" "python" "r" "ruby" "sql" "stata" "xml"))
  )
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max))
  )
(global-set-key (kbd "C-S-l") 'indent-buffer)

(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
	(setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(global-set-key (kbd "C-/") 'comment-or-uncomment-region-or-line)

(defun get-math-result ()
  "Replace sexp before point by result of its evaluation."
  (interactive)
  (let ((result  (pp-to-string (eval (pp-last-sexp) lexical-binding))))
    (delete-region (save-excursion (backward-sexp) (point)) (point))
    (insert result)))
#+END_SRC

* Miscellaneous
#+BEGIN_SRC emacs-lisp
; can have some trouble with fonts if this isn't set
(define-key special-event-map [config-changed-event] #'ignore)

(setq fortran-line-length nil)

(add-hook
 'c++-mode-hook
 (lambda () (when (file-remote-p default-directory) (company-mode -1))))
#+END_SRC

* Site-Specific

Look for a file, `custom_byhand.el` in the `.emacs.d` directory that
would contain non-git-tracked customizations

#+BEGIN_SRC emacs-lisp

(defvar site-el (expand-file-name "custom_byhand.el" user-emacs-directory))
(if (file-exists-p site-el) (load-file site-el))

#+END_SRC
