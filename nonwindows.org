#+TITLE: Vince's Emacs Configuration For NonWindows Systems
#+AUTHOR: Vince West

* Packages

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (setq projectile-completion-system 'ivy)
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  )
(projectile-mode)
(counsel-projectile-mode)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  (use-package evil-magit)
  )
#+END_SRC

** elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init
  (setq python-shell-interpreter "ipython"
		python-shell-interpreter-args "-i --simple-prompt")
  (elpy-enable)
  (if (not (eq system-type 'windows-nt))
  	  (setq elpy-rpc-python-command "python")
  	  ;; (setq python-shell-interpreter "ipython")
  	)
  :config
  (define-key elpy-mode-map (kbd "C-c .") 'elpy-goto-definition)
  )

#+END_SRC
** Ledger-Mode
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :init
  :config
  (defun ledger-revert ()
	(interactive)
	(if (not (eq major-mode 'ledger-mode))
	  (ledger-mode))
	(revert-buffer t t t)
	(ledger-mode-clean-buffer)))
#+END_SRC

** Ranger
#+BEGIN_SRC emacs-lisp
(use-package ranger)
#+END_SRC

** Markdown Related
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command
		      (concat
		       "pandoc"
		       " --from=markdown --to=html"
		       " --standalone --mathjax --highlight-style=pygments"))
		(setq markdown-xhtml-header-content
			  (concat "<script type=\"text/javascript\" async"
					  " src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/"
					  "2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\">"
					  "</script>"))
		)
(use-package mmm-mode
  :init
  (defun my-mmm-markdown-auto-class (lang &optional submode)
    "Define a mmm-mode class for LANG in `markdown-mode' using SUBMODE.
    If SUBMODE is not provided, use `LANG-mode' by default."
    (let ((class (intern (concat "markdown-" lang)))
	  (submode (or submode (intern (concat lang "-mode"))))
	  (front (concat "^```" lang "[\n\r]+"))
	  (back "^```"))
      (mmm-add-classes (list (list class :submode submode :front front :back back)))
      (mmm-add-mode-ext-class 'markdown-mode nil class)))
  (setq mmm-global-mode 'maybe) ;; Mode names that derive directly from the language name
  (mapc 'my-mmm-markdown-auto-class
	'("awk" "bibtex" "c" "cpp" "css" "html" "latex" "lisp" "makefile"
	  "markdown" "python" "r" "ruby" "sql" "stata" "xml"))
  )
#+END_SRC
